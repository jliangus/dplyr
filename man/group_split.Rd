% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/group_split.R
\name{group_split}
\alias{group_split}
\title{Split data frame by groups}
\usage{
group_split(.data, ...)
}
\arguments{
\item{.data}{A tbl}

\item{...}{See \code{\link[=group_by]{group_by()}}, \code{\link[=group_by_at]{group_by_at()}} or \code{\link[=group_by_if]{group_by_if()}}}
}
\value{
a list of tibbles. Each tibble contains the rows of \code{.data} for the associated group.
}
\description{
Split data frame by groups
}
\examples{
iris \%>\%
  group_split(Species)

# group_split() an already grouped data frame
iris \%>\%
  group_by(Species) \%>\%
  group_split()

# this can be useful if the grouped data has been altered
# before the split
iris \%>\%
  group_by(Species) \%>\%
  filter(Sepal.Length > 6) \%>\%
  group_split()

}
\concept{grouping functions

[group_split()] works like [base::split()] but
- it uses the grouping structure
  from [group_by()]. In particular, groups may be empty and lead to tibbles with
  0 rows.
- it does not name the elements of the list based on the grouping as this typically
  loses information and is confusing.

 The object that results from [group_split()] does not contain grouping
 information, but it can be paired with [group_keys()] to get that information,
 each row of the data frame returned by [group_keys()] is associated to one
 element of the result of [group_split()].}
